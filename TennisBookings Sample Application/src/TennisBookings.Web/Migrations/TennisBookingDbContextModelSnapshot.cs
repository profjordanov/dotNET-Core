// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisBookings.Web.Data;

namespace TennisBookings.Web.Migrations
{
    [DbContext(typeof(TennisBookingDbContext))]
    partial class TennisBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("TennisBookings.Web.Data.Court", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Courts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Court 1",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Court 2",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Court 3",
                            Type = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Court 4",
                            Type = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Court 5",
                            Type = 1
                        });
                });

            modelBuilder.Entity("TennisBookings.Web.Data.CourtBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourtId");

                    b.Property<DateTime>("EndDateTime");

                    b.Property<int>("MemberId");

                    b.Property<DateTime>("StartDateTime");

                    b.Property<string>("TennisBookingsUserId");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.HasIndex("MemberId");

                    b.HasIndex("TennisBookingsUserId");

                    b.ToTable("CourtBookings");
                });

            modelBuilder.Entity("TennisBookings.Web.Data.CourtMaintenanceSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourtId");

                    b.Property<bool>("CourtIsClosed");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("WorkTitle");

                    b.HasKey("Id");

                    b.HasIndex("CourtId");

                    b.ToTable("CourtMaintenance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourtId = 4,
                            CourtIsClosed = true,
                            EndDate = new DateTime(2019, 3, 7, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2019, 3, 1, 6, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTitle = "Resurface"
                        },
                        new
                        {
                            Id = 2,
                            CourtId = 1,
                            CourtIsClosed = false,
                            EndDate = new DateTime(2019, 4, 15, 13, 15, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2019, 4, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTitle = "Replace Seats"
                        },
                        new
                        {
                            Id = 3,
                            CourtId = 2,
                            CourtIsClosed = true,
                            EndDate = new DateTime(2019, 2, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2019, 2, 8, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            WorkTitle = "Replace Net"
                        });
                });

            modelBuilder.Entity("TennisBookings.Web.Data.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Forename");

                    b.Property<DateTime>("JoinDate");

                    b.Property<string>("Surname");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("TennisBookings.Web.Data.TennisBookingsRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("TennisBookings.Web.Data.TennisBookingsUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("LastRequestUtc");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.TennisBookingsRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.TennisBookingsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.TennisBookingsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.TennisBookingsRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisBookings.Web.Data.TennisBookingsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.TennisBookingsUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TennisBookings.Web.Data.CourtBooking", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.Court", "Court")
                        .WithMany("Bookings")
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisBookings.Web.Data.Member", "Member")
                        .WithMany("CourtBookings")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TennisBookings.Web.Data.TennisBookingsUser")
                        .WithMany("CourtBookings")
                        .HasForeignKey("TennisBookingsUserId");
                });

            modelBuilder.Entity("TennisBookings.Web.Data.CourtMaintenanceSchedule", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.Court", "Court")
                        .WithMany()
                        .HasForeignKey("CourtId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("TennisBookings.Web.Data.Member", b =>
                {
                    b.HasOne("TennisBookings.Web.Data.TennisBookingsUser", "User")
                        .WithOne("Member")
                        .HasForeignKey("TennisBookings.Web.Data.Member", "UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
