using System;
using System.IO;
using System.Net.Http;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading.Tasks;
using Google.Apis.Auth.OAuth2;
using Google.Apis.FirebaseDynamicLinks.v1;
using Google.Apis.FirebaseDynamicLinks.v1.Data;
using Google.Apis.Services;
using HeidelbergCement.Platform.Permissions.Api.Extensions;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;

namespace HeidelbergCement.Platform.Permissions.Api.Services
{
    public class DynamicLinksService
    {
        public async Task<string> X()
        {
            var domain = "asdada";
            var playId = "";
            var iosId = "";

            var queryString = System.Web.HttpUtility.ParseQueryString(string.Empty);

            var mslReq = new CreateShortDynamicLinkRequest
            {
                DynamicLinkInfo = new DynamicLinkInfo
                {
                    AndroidInfo = new AndroidInfo() {AndroidPackageName = playId},
                    IosInfo = new IosInfo() {IosAppStoreId = iosId, IosBundleId = playId},
                    DomainUriPrefix = $"https://{domain}",
                    Link = $"https://www.example.com/?{queryString}"
                },
                Suffix = new Suffix {Option = "SHORT"}
            };

            var json = JsonConvert.SerializeObject(mslReq, Formatting.Indented, new CreateShortDynamicLinkRequestConverter());

            var service = AuthenticateServiceAccount(
                "gayan@empite.com",
                "Opt/Keys/quallogi-keys.json",
                new[] { "https://www.googleapis.com/auth/firebase" });

            var request = service.ShortLinks.Create(new CreateShortDynamicLinkRequest());

            request.ModifyRequest = message =>
                message.Content = new StringContent(json, Encoding.UTF8, "application/json");

            var res = await request.ExecuteAsync();
            return res.ShortLink;
        }

        public class CreateShortDynamicLinkRequestConverter : JsonConverter
        {
            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                serializer.NullValueHandling = NullValueHandling.Ignore;
                var t = JToken.FromObject(value);
                var modified = t.RemoveFields("ETag");

                modified.WriteTo(writer);
            }

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                throw new NotImplementedException();
            }

            public override bool CanConvert(Type objectType)
            {
                return true;
            }

            public override bool CanRead => false;
        }

        /// <summary>
        /// //////////////////////////////////////////////////////////////////////
        /// </summary>
        /// <param name="longLink"></param>
        /// <returns></returns>
        public static async Task<string> GetShortLink(string longLink)
        {
            var service = AuthenticateServiceAccount("gayan@empite.com", "Opt/Keys/quallogi-keys.json", new[] { "https://www.googleapis.com/auth/firebase" });
            var request = service.ManagedShortLinks.Create(new CreateManagedShortLinkRequest
            {
                DynamicLinkInfo = new DynamicLinkInfo
                {
                    //DynamicLinkDomain = "https://quallogi.page.link",
                    DomainUriPrefix = "quallogi.page.link",
                    AnalyticsInfo = new AnalyticsInfo(),
                    IosInfo = new IosInfo(),
                    Link = "https://github.com/distriqt/ANE-Firebase/wiki/DynamicLinks---Create-Dynamic-Links",

                },

                Suffix = new Suffix { Option = "SHORT" },
                Name = "shortlink",


            });
            var response = await request.ExecuteAsync();
            return response.PreviewLink;
        }

        public static FirebaseDynamicLinksService AuthenticateServiceAccount(string serviceAccountEmail, string serviceAccountCredentialFilePath, string[] scopes)
        {
            try
            {
                if (string.IsNullOrEmpty(serviceAccountCredentialFilePath))
                    throw new Exception("Path to the service account credentials file is required.");
                if (!File.Exists(serviceAccountCredentialFilePath))
                    throw new Exception("The service account credentials file does not exist at: " + serviceAccountCredentialFilePath);
                if (string.IsNullOrEmpty(serviceAccountEmail))
                    throw new Exception("ServiceAccountEmail is required.");

                if (Path.GetExtension(serviceAccountCredentialFilePath).ToLower() == ".json")
                {
                    GoogleCredential credential;
                    using (var stream = new FileStream(serviceAccountCredentialFilePath, FileMode.Open, FileAccess.Read))
                    {
                        credential = GoogleCredential.FromStream(stream)
                             .CreateScoped(scopes);
                    }

                    return new FirebaseDynamicLinksService(new BaseClientService.Initializer()
                    {
                        HttpClientInitializer = credential,
                        ApplicationName = "Firebasedynamiclinks Service account Authentication Sample",
                    });
                }

                if (Path.GetExtension(serviceAccountCredentialFilePath).ToLower() != ".p12")
                    throw new Exception("Unsupported Service accounts credentials.");
                {
                    var certificate = new X509Certificate2(serviceAccountCredentialFilePath, "notasecret", X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.Exportable);
                    var credential = new ServiceAccountCredential(new ServiceAccountCredential.Initializer(serviceAccountEmail)
                    {
                        Scopes = scopes
                    }.FromCertificate(certificate));

                    return new FirebaseDynamicLinksService(new BaseClientService.Initializer()
                    {
                        HttpClientInitializer = credential,
                        ApplicationName = "Firebasedynamiclinks Authentication Sample",
                    });
                }

            }
            catch (Exception ex)
            {
                throw new Exception("CreateServiceAccountFirebasedynamiclinksFailed", ex);
            }
        }
    }
}
